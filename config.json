{

// This config is used for development and is a playground.

"link_new_for_existing_links": "1", // default false/0
"addr_new_for_existing_addresses": "true", // default false/0
"pid_file": "/tmp/snetmanmon.pid", // default none

"events": {
	"link_new": {
		"filter": {
			// http://www.boost.org/doc/libs/1_58_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html
			"ifname" : "enp0s29u1u2", // regex
			"address" : "36:ca:63:6:b6:4d", // regex
			// state can be unknown, notpresent, down,
			// lowerlayerdown, testing, dormant, up
			// The state for generated events for existing
			// links (interfaces) is either up or down.
			"state": "down", // regex
			"actions": {
				// %e event
				// %i ifname
				// %I ifname_old
				// %a address
				// %s state
				// %S state_old
				"stdout": "link_new_filter e:'%e' i:'%i' I:'%I' a:'%a' s:'%s' S:'%S'"
			}
		},
		"filter": {
			"ifname_old": ".+", // regex, not empty => if renamed
			"actions": {
				"stdout": "link renamed e:'%e' i:'%i' I:'%I' a:'%a' s:'%s' S:'%S'"
			}
		},
		"filter": {
			"ifname_old": "^$", // regex, empty => if not renamed
			"actions": {
				"stdout": "link new or changed e:'%e' i:'%i' I:'%I' a:'%a' s:'%s' S:'%S'"
			}
		},
		"filter": {
			"ifname_old": "^$",
			"state": "unknown|up",
			"actions": {
				"stdout": "link unknown or up e:'%e' i:'%i' I:'%I' a:'%a' s:'%s' S:'%S'"
			}
		},
		"actions": {
			"stdout": "link_new e:'%e' i:'%i' I:'%I' a:'%a' s:'%s' S:'%S'",

			// Actions of type exec_seq are serialized. That means they
			// always should end quickly, because subsequent actions of
			// type exec_seq will only run after execution of the previous
			// action has ended.
			// If possible, always use actions of type exec_seq instead of exec.
			"exec_seq": "echo \"new link1 e:'%e' i:'%i' I:'%I' a:'%a' s:'%s' S:'%S'\"",
			"exec_seq": "echo \"new link2 e:'%e' i:'%i' I:'%I' a:'%a' s:'%s' S:'%S'\"",

			// Actions of type exec are always running in their own thread.
			// This means they aren't serialized and can block or run
			// as long as snetmanmon runs.
			// Be aware that killing snetmanmon doesn't kill these threads,
			// so you should always make sure that they will end on their
			// own.
			"exec": "echo \"new link e:'%e' i:'%i' I:'%I' a:'%a' s:'%s' S:'%S'\""
			// For example, below is a bad action which will print its PID
			// and never stops (which should not happen). You might use
			// it to try out what happens if you kill snetmanmon.
			//"exec": "while :; do echo $$; sleep 1; done"
		}
	},
	"link_del": {
		"filter": {
			"ifname": "enp0s29u1u2",
			"address": "36:ca:63:6:b6:4d",
			"state": "down",
			"actions": {
				"stdout": "link_del_filter e:'%e' i:'%i' a:'%a' s:'%s' S:'%S'"
			}
		},
		"actions": {
			"stdout": "link_del e:'%e' i:'%i' a:'%a' s:'%s' S:'%S'"
		}
	},
	"addr_new": {
		"filter": {
			"ifname": "enp0s29u1u2",
			"type": "v4", // no regex!
			"address": "192\\.168.*",
			"actions": {
				"stdout": "addr_new_filter e:'%e' i:'%i' t:'%t' a:'%a' b:'%b'"
			}
		},
		"filter": {
			"ifname": "bnep[0-9]",
			"type": "v6",
			"address": "feeb::.*",
			"actions": {
				"stdout": "addr_new_filter_2 e:'%e' i:'%i' t:'%t' a:'%a' b:'%b'"
			}
		},
		"filter": {
			"ifname": "bnep0",
			"type": "v6",
			"actions": {
				"stdout": "addr_new_filter_3 e:'%e' i:'%i' t:'%t' a:'%a' b:'%b'"
			}
		},
		"actions": {
			"stdout": "addr_new e:'%e' i:'%i' t:'%t' a:'%a' b:'%b'",
			"exec_seq": "echo \"new addr e:'%e' i:'%i' t:'%t' a:'%a' b:'%b'\""
		}
	},
	"addr_del": {
		"filter": {
			"ifname": "enp0s29u1u2",
			"type": "v4",
			"address": "192\\.168\\.7\\.1",
			"broadcast": "192\\.168\\.7\\.3",
			"actions": {
				"stdout": "addr_del_filter e:'%e' i:'%i' t:'%t' a:'%a' b:'%b'"
			}
		},
		"actions": {
			"stdout": "addr_del e:'%e' i:'%i' t:'%t' a:'%a' b:'%b'"
		}
	}
} // events
}
