{

// Example how to log events to the kernel ring buffer (man dmesg).
// On a typical system these messages are logged to syslog too.

// Because /dev/kmsg is usually only writable by root,
// snetmanmon needs to run as root for this to work.

"link_new_for_existing_links": "1", // default false/0
"addr_new_for_existing_addresses": "true", // default false/0
"route_new_for_existing_routes": "true", // default false/0
"pid_file": "/run/snetmanmon.pid", // default none

"events": {
	"link_new": {
		"filter": {
			"ifname_old": "^$" // empty => if not renamed
			,"address": "^$" // some interfaces like the loopback don't have a MAC
			,"address_old": "^$" // MAC hasn't changed
			,"state_old": "^$" // State hasn't changed
			,"actions": {
				"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: New interface '%i' (state %s)\""
			}
		}
		,"filter": {
			"ifname_old": "^$"
			,"address": ".+" // Require MAC
			,"address_old": "^$"
			,"state_old": "^$"
			,"actions": {
				"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: New interface '%i' (state %s, MAC %a)\""
			}
		}
		,"filter": {
			"ifname_old": ".+" // not empty => if renamed
			,"address": "^$"
			,"actions": {
				"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: Interface '%I' was renamed to '%i' (state %s)\""
			}
		}
		,"filter": {
			"ifname_old": ".+"
			,"address": ".+"
			,"actions": {
				"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: Interface '%I' was renamed to '%i' (MAC %a, state %s)\""
			}
		}
		,"filter": {
			"state_old": ".+" // not empty => state changed
			,"address": "^$"
			,"actions": {
				"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: Interface '%i' changed state from %S to %s\""
			}
		}
		,"filter": {
			"state_old": ".+"
			,"address": ".+"
			,"actions": {
				"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: Interface '%i' (MAC %a) changed state from %S to %s\""
			}
		}
		,"filter": {
			"address_old": ".+"
			,"address": ".+"
			,"actions": {
				"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: MAC changed on interface %i from %A to %a (state %s)\""
			}
		}
		// We assume a MAC can't be added or removed from an interface,
		// that means it either has a MAC right from it's appearance or it doesn't.
	}
	,"link_del": {
		"actions": {
			"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: Interface '%i' was deleted\""
		}
	}
	,"addr_new": {
		"filter": {
			"broadcast": ".+"
			,"actions": {
				"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: New IP%t %a on interface '%i' (broadcast %b)\""
			}
		}
		,"filter": {
			"broadcast": "^$"
			,"actions": {
				"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: New IP%t %a on interface '%i'\""
			}
		}
	}
	,"addr_del": {
		"actions": {
			"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: IP%t %a on interface '%i' was deleted\""
		}
	}

	/* route events may happen surprisingly often, therefor we don't log them by default to the kernels ring buffer
	,"route_new": {
		"filter": {
			"gateway": ".+"
			,"actions": {
				"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: New route %d (gateway %g, type %t) on interface '%i'\""
			}
		}
		,"filter": {
			"gateway": "^$"
			,"actions": {
				"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: New route %d (type %t) on interface '%i'\""
			}
		}
	}
	,"route_del": {
		"filter": {
			"gateway": ".+"
			,"actions": {
				"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: Route %d (gateway %g, type %t) on interface '%i' was deleted\""
			}
		}
		,"filter": {
			"gateway": "^$"
			,"actions": {
				"exec_seq": "test -w /dev/kmsg && echo >/dev/kmsg \"snetmanmon: Route %d (type %t) on interface '%i' was deleted\""
			}
		}
	}
	*/ // end of disabled route event logging

} // events
}
